esphome:
  name: ctrlh-exit-poll
  friendly_name: romkey - CTRLH Exit Poll (LEDs)

esp32:
  board: um_tinys3
#  board: tinypico
  framework:
    type: arduino

logger:

api:
  encryption:
    key: !secret api_key

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  id: wifi_id

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ctrlh-Exit-Poll Fallback Hotspot"
    password: !secret hotspot_password

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time

debug:
  update_interval: 5s

font:
  - file: 'fonts/B612-Regular.ttf'
    id: font_12pt
    size: 12
  - file: 'fonts/B612-Regular.ttf'
    id: font_20pt
    size: 20
  - file: 'fonts/B612-Regular.ttf'
    id: font_40pt
    size: 40
# https://community.home-assistant.io/t/az-touch-esp-example/383573/22
  - file: 'fonts/MaterialIcons-Regular.ttf'
    id: font_icons
    size: 22
    glyphs:
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog      
      - "\U000F0592" # hail
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F0F33" # light-rain
      - "\U000F0F34" # flurries
      - "\U000F0598" # light-snow
      - "\U000F0F35" # freezing-drizzle
      - "\U000F0502" # television off
      - "\U000F0594" # star night
      - "\U000F1A4C" # night light
      - "\U000F1051" # led strip on
      - "\U000F18DD" # multiple ceiling lights filled
      - "\U000F0335" # light bulb filled
      - "\U000F0336" # light bulb outline
      - "\U000F12CF" # multiple lights off
      - "\U000F18DE" # multiple ceiling lights outline
      - "\U000F1253" # multiple bulbs filled
      - "\U000F1254" # multiple bulbs outline
      - "\U000F1A4B" # led strip off
      - "\U000F0503" # television on
      - "\U000F0395" # dasboard
      - "\U0000E63E" # wifi
      - "\U0000E648" # no-wifi

  - file: 'fonts/MaterialIcons-Regular.ttf'
    id: font_icons_40pt
    size: 40
    glyphs:
      - "\U0000E63E" # wifi
      - "\U0000E648" # no-wifi

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

image:
  - file: "files/lcars-blue.png"
    id: lcars_blue
    type: RGB565
  - file: "files/lcars-red.png"
    id: lcars_red
    type: RGB565
  - file: "files/lcars-green-bar.png"
    id: lcars_green_bar
    type: RGB565
  - file: "files/lcars-red-bar.png"
    id: lcars_red_bar
    type: RGB565
  - file: "files/lcars-gray-bar.png"
    id: lcars_gray_bar
    type: RGB565
  - file: "files/lcars-blue-arc.png"
    id: lcars_blue_arc
    type: RGB565
  - file: "files/lcars-red-arc.png"
    id: lcars_red_arc
    type: RGB565
  - file: "files/lcars-top-arc.png"
    id: lcars_top_arc
    type: RGB565

spi:
  clk_pin: 36
  mosi_pin: 35
  miso_pin: 37
  interface: hardware

#output:
#  - platform: ledc
#    pin: 25
#    id: gpio_32_backlight_pwm

# Define a monochromatic, dimmable light for the backlight
#light:
#  - platform: monochromatic
#    output: gpio_32_backlight_pwm
#    name: "Display Backlight"
#    id: back_light
#    restore_mode: ALWAYS_ON

display:
  # https://esphome.io/components/display/ili9xxx
  - platform: ili9xxx
    model: st7796
    dc_pin: 8
    reset_pin: 7
    cs_pin: 6
    data_rate: 40MHz
    rotation: 0
    invert_colors: false
    lambda: |-
      static boolean first_draw = 1;

      if(first_draw) {
        it.fill(id(my_black));

        it.image(0, 0, id(lcars_top_arc));
      }

      auto time = id(homeassistant_time).now();
      if(id(wifi_id).is_connected()){
        it.print(250, 0, id(font_icons_40pt), id(my_green), "\U0000E63E");
      } else {
        it.print(250, 0, id(font_icons_40pt), id(my_red), "\U0000E648");
      }

      if(time.is_valid()) {
      //  it.printf(100, 8, id(font_12pt), id(my_green), "%02d:%02d:%02d %d/%d/%d", time.hour, time.minute, time.second, time.month, time.day_of_month, time.year);
        it.printf(130, 8, id(font_20pt), id(my_green), "%02d:%02d:%02d", time.hour, time.minute, time.second);
      } else {
      //  it.print(100, 8, id(font_12pt), id(my_red), "--:--:-- --/--/--");
        it.print(130, 8, id(font_20pt), id(my_red), "--:--:--");
      }

      #define LCARS_TOP(sec_a, sec_b) \
          it.image(0, row, id(lcars_blue_arc)); \
          it.image(159, row, id(lcars_blue_arc)); \
          it.print(150, row, id(font_40pt), id(my_black), TextAlign::TOP_RIGHT, sec_a); \
          it.print(310, row, id(font_40pt), id(my_black), TextAlign::TOP_RIGHT, sec_b); \
          row += 40;

      #define LCARS_ROW(label, state1, state2) \
          if(isnan(state1)) { \
              it.image(0, row, id(lcars_gray_bar)); \
          } else if(state1 == 0) { \
              it.image(0, row, id(lcars_green_bar)); \
          } else { \
              it.image(0, row, id(lcars_red_bar)); \
          } \
          if(isnan(state2)) { \
              it.image(159, row, id(lcars_gray_bar)); \
          } else if(state2 == 0) { \
              it.image(159, row, id(lcars_green_bar)); \
          } else { \
              it.image(159, row, id(lcars_red_bar)); \
          } \
          it.print(99, row, id(font_20pt), id(my_white), TextAlign::TOP_RIGHT, label); \
          it.print(258, row, id(font_20pt), id(my_white), TextAlign::TOP_RIGHT, label); \
          \
          if(!isnan(state1))  \
              it.printf(120, row, id(font_20pt), id(my_white),  "%1.0f", state1); \
          if(!isnan(state2))  \
              it.printf(280, row, id(font_20pt), id(my_white), "%1.0f", state2); \
          row += 40;

      auto row = 80;

      LCARS_TOP("Sec 1", "Sec 2")

      LCARS_ROW("Doors", id(section_1_doors_open).state, id(section_2_doors_open).state)
      LCARS_ROW("Locks", id(section_1_doors_unlocked).state, id(section_2_doors_unlocked).state)
      LCARS_ROW("AV", id(section_1_av_on).state, id(section_2_av_on).state)
      LCARS_ROW("Water", id(section_1_water_running).state, id(section_2_water_running).state)

      LCARS_TOP("Sec 3", "Sec 4")

      LCARS_ROW("Doors", id(section_3_doors_open).state, id(section_4_doors_open).state)
      LCARS_ROW("Locks", id(section_3_doors_unlocked).state, id(section_4_doors_unlocked).state)
      LCARS_ROW("AV", id(section_3_av_on).state, id(section_4_av_on).state)
      LCARS_ROW("Water", id(section_3_water_running).state, id(section_4_water_running).state)


sensor:
  - platform: homeassistant
    name: "Section 1 Doors Open"
    id: section_1_doors_open
    entity_id: sensor.total_section_1_doors_open
  - platform: homeassistant
    name: "Section 1 AV On"
    id: section_1_av_on
    entity_id: sensor.total_section_1_av_on
  - platform: homeassistant
    name: "Section 1 Running Water"
    id: section_1_water_running
    entity_id: sensor.total_section_1_water_running
  - platform: homeassistant
    name: "Section 1 Doors Unlocked"
    id: section_1_doors_unlocked
    entity_id: sensor.total_section_1_doors_unlocked
  - platform: homeassistant
    name: "Section 2 Doors Open"
    id: section_2_doors_open
    entity_id: sensor.total_section_2_doors_open
  - platform: homeassistant
    name: "Section 2 AV On"
    id: section_2_av_on
    entity_id: sensor.total_section_2_av_on
  - platform: homeassistant
    name: "Section 2 Running Water"
    id: section_2_water_running
    entity_id: sensor.total_section_2_water_running
  - platform: homeassistant
    name: "Section 2 Doors Unlocked"
    id: section_2_doors_unlocked
    entity_id: sensor.total_section_2_doors_unlocked
  - platform: homeassistant
    name: "Section 3 Doors Open"
    id: section_3_doors_open
    entity_id: sensor.total_section_3_doors_open
  - platform: homeassistant
    name: "Section 3 AV On"
    id: section_3_av_on
    entity_id: sensor.total_section_3_av_on
  - platform: homeassistant
    name: "Section 3 Running Water"
    id: section_3_water_running
    entity_id: sensor.total_section_3_water_running
  - platform: homeassistant
    name: "Section 3 Doors Unlocked"
    id: section_3_doors_unlocked
    entity_id: sensor.total_section_3_doors_unlocked
  - platform: homeassistant
    name: "Section 4 Doors Open"
    id: section_4_doors_open
    entity_id: sensor.total_section_4_doors_open
  - platform: homeassistant
    name: "Section 4 AV On"
    id: section_4_av_on
    entity_id: sensor.total_section_4_av_on
  - platform: homeassistant
    name: "Section 4 Running Water"
    id: section_4_water_running
    entity_id: sensor.total_section_4_water_running
  - platform: homeassistant
    name: "Section 4 Doors Unlocked"
    id: section_4_doors_unlocked
    entity_id: sensor.total_section_4_doors_unlocked

  - platform: template
    name: "Total doors unlocked"
    id: total_doors_unlocked
    internal: True
    lambda: |-
      return id(section_1_doors_unlocked).state + id(section_2_doors_unlocked).state + id(section_3_doors_unlocked).state + id(section_4_doors_unlocked).state;
    update_interval: 1s
  - platform: template
    name: "Total doors open"
    id: total_doors_open
    internal: True
    lambda: |-
      return id(section_1_doors_open).state + id(section_2_doors_open).state + id(section_3_doors_open).state + id(section_4_doors_open).state;
    update_interval: 1s
  - platform: template
    name: "Total AV on"
    id: total_av_on
    internal: True
    lambda: |-
      return id(section_1_av_on).state + id(section_2_av_on).state + id(section_3_av_on).state + id(section_4_av_on).state;
    update_interval: 1s    
  - platform: template
    name: "Total water running"
    id: total_water_running
    internal: True
    lambda: |-
      return id(section_1_water_running).state + id(section_2_water_running).state + id(section_3_water_running).state + id(section_4_water_running).state;
    update_interval: 1s

  - platform: template
    name: "System Status"
    id: system_status
    lambda: |-
      if(!id(wifi_id).is_connected()){
        return 1;
      }
      if(!global_api_server->is_connected()) {
        return 2;
      }   
      if(id(total_doors_open).state > 0 || id(total_doors_unlocked).state > 0) {
        return 4;
      }
      if(id(total_av_on).state > 0 || id(total_water_running).state > 0) {
        return 3;
      }

      return 0;
    update_interval: 1s

  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
  - platform: uptime
    name: Uptime Sensor
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
    bssid:
      name: BSSID
    mac_address:
      name: MAC
    dns_address:
      name: DNS

button:
  - platform: restart
    name: "Restart"

# https://esphome.io/components/light/
light:
  - platform: fastled_clockless
    chipset: WS2811
    pin: 1
    num_leds: 8
    rgb_order: GRB
    id: "led_strip"
    effects:
      - pulse:
          name: "Slow Pulse"
          # transition_length: 1s      # defaults to 1s
          update_interval: 2s      
# system status
# 0 - all good (green - 0x00FF00)
# 1 - no wifi (orange - 0xFFA500)
# 2 - no Home Assistant data (blue - 0x0000FF)
# 3 - non-urgent issues (yellow - 0xFFFF00)
# 4 - urgent issues (red - 0xFF0000)
      - addressable_lambda:
          name: "static"
          update_interval: 1s
          lambda: |-
            Color color;

            switch((int)id(system_status).state) {
              case 0:
                color = Color(0x00, 0xFF, 0x00);
                break;
              case 1:
                color = Color(0xFF, 0xAA, 0x00);
                break;
              case 2:
                color = Color(0x00, 0x00, 0xFF);
                break;
              case 3:
                color = Color(0xFF, 0xFF, 0x00);
                break;
              case 4:
                color = Color(0xFF, 0x00, 0x00);
                break;
              default:
                color = Color::BLACK;
            }
            it.range(0, 8) = color;
      - addressable_lambda:
          name: "throb"
          update_interval: 100ms
          lambda: |-
            static int brightness = 0;
            static int increment = 0x10;

            if(brightness == 100)
              increment = -0x10;
            if(brightness == 0)
              increment = 0x10;

            brightness += increment;
            brightness = min(brightness, 100);
            brightness = max(brightness, 0);

            // auto leds = it.leds();

            for(int i = it.size() - 1; i > 0; i--) {
              // it[i].fadeLightBy( brightness );
              // it[i].set_brightness(brightness);
            }

interval:
  - interval: 1sec
    then:
      - light.control:
          id: led_strip
          effect: static
          state: on
          brightness: 50%
